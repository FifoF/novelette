%% This is file `novelette-graphics.sty',
%% part of `novelette' document class.
%% Copyright 2023 Robert Allgeyer.
%%
%% This file may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3c
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%    http://www.latex-project.org/lppl.txt
%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2005/12/01 or later.
%%
\ProvidesFile{novelette-graphics.sty}%
[2023/01/20 v0.2 LaTeX file (alternative to graphics and color)]
%%


%% LIMITED GRAPHICS, LIMITED GRAY COLOR
%% ----------------------------------------------------------------------------
%   Standard LaTeX color and graphics are contained in the graphics bundle,
% by David Carlisle, Sebastian Rahtz, and other members of the LaTeX project,
% and individual authors. Shout-out to them!
%   But Novelette has very restricted use of color and graphics. All text must
% be black, all images monochrome black/white png without transforms. The only
% exception is use of background grays, when in shade|align mode.
%   For those reasons, Novelette does not load standard LaTeX graphics. It is
% much easier to define only what is needed, instead of loading LaTeX graphics
% then un-defining most of its numerous commands.
%%


%% WARN OR ERROR WHEN ATTEMPTING TO USE STANDARD GRAPHICS COMMANDS
\def\nvt@colormsg{%
  \ifnvt@sent@colormsg\else%
    \ClassWarning{novelette}{Cannot use color or grayscale in Novelette.^^J%
      Any color-related commands will be ignored.}%
  \fi%
}
\DeclareDocumentCommand\color{O{}m}{\nvt@colormsg\ignorespaces}
\def\textcolor#1#2{\leavevmode\nvt@colormsg #2}
\def\colorbox#1#2{\leavevmode\nvt@colormsg #2}
\def\pagecolor#1{\nvt@colormsg}
\def\nopagecolor{\nvt@colormsg}
\def\definecolor#1#2#3{\nvt@colormsg}
\def\DefineNamedColor#1#2#3#4{\nvt@colormsg}
\def\normalcolor{}
\DeclareDocumentCommand\includegraphics{sO{}m}{%
  \nvt@error{You cannot use \string\includegraphics.^^J%
    Novelette has its own \string\image\space command.}%
}
%%


%% BLACK AND GRAY SHADES
\def\@black{0 g 0 G}
\def\nvt@shade{0 g 0 G}
\def\@newcolor{%
  \pdfextension colorstack 0 push{\nvt@shade}%
  \aftergroup\@prevcolor%
}
\def\@prevcolor{\pdfextension colorstack 0 pop\relax}
\DeclareRobustCommand\nvt@gray[1]{%
  \def\nvt@shade{#1 g #1 G}\@newcolor\ignorespaces%
}
\protected\def\nvt@textgray#1#2{{\nvt@shade{#1}#2}}
%%


%% IMAGE
% \image[options]{integer or filename.png}
%   Options may be at most one of l c r o i, and/or at most one of h, t, b, p.
% Option l c r o i sets horizontal alignment left|center|right|outside|inside.
% Default c, except in opening environment, which has its own default..
%   Option h t b p sets vertical placement, relative to surrounding text,
% as h=here (where command is written), t=top (same page above command),
% b=bottom (bottom of page below command), or p=page (page by itself).
%   If placement h cannot fit, it floats to top of following page. If the
% page cannot accomodate t, then image moves to top of following page.
% If placement b cannot fit, image moves to bottom of following page.
% Placement p always fits unless image is too large for page by itself.
%   Each \image must be in a paragraph by itself.
\def\nvt@imgfilename{}
\newsavebox\nvt@imgbox
\def\ftype@figure{1} % Mystery TeX code.
\DeclareDocumentCommand\image{O{}m}{%
  \vspace*{-\nvt@leading}\null% Uniform descender above.
  \begingroup%
  \StrDel{#1}{ }[\nvt@temp@s]%
  \nvt@TestImagePlacement{\nvt@temp@s}%
  \StrDel{#2}{ }[\nvt@imgfn]%
  \setlength\parindent{0pt}%
  \nvt@TestImageFormat{\nvt@imgfn}%
  \ifthenelse{\equal{\nvt@imgformat}{real}}{%
    \nvt@validate@image%
    \@addtofilelist{\nvt@imgfn}%
    \ProvidesFile{\nvt@imgfn}[png image]%
    \saveimageresource attr{/Interpolate true } cropbox {\nvt@imgfn}%
    \sbox\nvt@imgbox{\useimageresource\the\lastsavedimageresourceindex}%
  }{%
    \sbox\nvt@imgbox{\nvt@gray{.5}%
      \rule{.5\textwidth}{\nvt@intht-\nvt@leading+\nvt@ascn}%
    }%
  }%
  \setlength\nvt@imgwidth{\wd\nvt@imgbox}%
  \setlength\nvt@imgheight{\ht\nvt@imgbox}%
  \FPadd{\nvt@temp@n}{\strip@pt\nvt@imgheight}{\strip@pt\nvt@dscn}%
  \FPdiv{\nvt@temp@n}{\nvt@temp@n}{\strip@pt\nvt@leading}%
  \FPadd{\nvt@temp@n}{\nvt@temp@n}{1}%
  \FPtrunc{\nvt@temp@n}{\nvt@temp@n}{0}%
  \setlength\nvt@intht{\nvt@temp@n\nvt@leading}%
  \ifthenelse{\equal{\nvt@floatpos}{t}}{\nvt@imgfloat{t}}{}%
  \ifthenelse{\equal{\nvt@floatpos}{b}}{\nvt@imgfloat{b}}{}%
  \ifthenelse{\equal{\nvt@floatpos}{h}}{\nvt@imgfloat{ht}}{}%
  \ifthenelse{\equal{\nvt@floatpos}{p}}{\nvt@imgfloat{p}}{}%
  \endgroup%
}
%%


%% TEST IMAGE PLACEMENT
\newcommand\nvt@TestImagePlacement[1]{% No error or warning, if bad value.
  \ifnvt@inopening\def\nvt@imgpos{\nvt@openalign}\else\def\nvt@imgpos{c}\fi%
  \IfSubStr{#1}{l}{\def\nvt@imgpos{l}}{}%
  \IfSubStr{#1}{r}{\def\nvt@imgpos{r}}{}%
  \IfSubStr{#1}{o}{\def\nvt@imgpos{o}}{}%
  \IfSubStr{#1}{i}{\def\nvt@imgpos{i}}{}%
  \def\nvt@floatpos{h}% Default here/top.
  \IfSubStr{#1}{t}{\def\nvt@floatpos{t}}{}%
  \IfSubStr{#1}{b}{\def\nvt@floatpos{b}}{}%
  \IfSubStr{#1}{p}{\def\nvt@floatpos{p}}{}%
}
%%


%% TEST IMAGE FORMAT
\newcommand\nvt@TestImageFormat[1]{%
  \def\nvt@imgformat{fake}%
  \nvt@okfalse%
  \IfEndWith{#1}{.png}{\nvt@oktrue}{}%
  \IfEndWith{#1}{.PNG}{\nvt@oktrue}{}%
  \ifnvt@ok%
    \IfBeginWith*{#1}{/}{\nvt@okfalse}{% No absolute path.
      \IfBeginWith*{#1}{..}{\nvt@okfalse}{% No escape from document directory.
        \IfFileExists{#1}{}{\nvt@okfalse}%
      }%
    }%
  \fi%
  \ifnvt@ok%
    \def\nvt@imgformat{real}%
  \else%
    \IfInteger{#1}{%
      \nvt@oktrue%
      \setlength\nvt@intht{#1\nvt@leading}%
  }{}%
  \fi%
  \ifnvt@ok\else%
    \setlength\nvt@intht{2\nvt@leading}%
    \nvt@error{Bad value in \string\image, page \thepage.}%
  \fi%
}
%%


%% VALIDATE IMAGE
\def\nvt@validate@image{%
  \nvt@oktrue%
  \edef\nvt@temp@s{\nvt@check@monochrome{\nvt@imgfn}}%
  \ifthenelse{\equal{\nvt@temp@s}{false}}{\nvt@okfalse}{}%
  \edef\nvt@temp@s{\nvt@getbytes{\nvt@imgfn}{e}{512}}%
  \ifthenelse{\equal{\nvt@temp@s}{fail}}{\nvt@okfalse}{}%
  \ifnvt@ok\else%
    \ifthenelse{\equal{\nvt@mode}{final} \AND\NOT \equal{\nvt@intent}{none}}{%
       \nvt@error{Image `\nvt@imgfn' did not pass validation.^^J%
         Must be processed to specific standards. See Novelette docs.^^J%
         Using ImageMagick: magick mogrify -monochrome -strip \nvt@imgfn^^J%
         Using GraphicsMagick: gm mogrify -monochrome -strip \nvt@imgfn}%
    }{%
      \ClassWarning{novelette}{Image `\nvt@imgfn' did not pass validation.^^J%
         Must be processed to specific standards. See Novelette docs.^^J%
         Using ImageMagick: magick mogrify -monochrome -strip \nvt@imgfn^^J%
         Using GraphicsMagick: gm mogrify -monochrome -strip \nvt@imgfn^^J%
         This warning may become an error in final mode.}%
    }%
  \fi%
}
%%


%% IMAGE FLOAT
\def\nvt@imgfloat#1{%
  \def\fps@figure{#1}%
  \@float{figure}%
  \leavevmode%
  \ifthenelse{\equal{\nvt@imgpos}{c}}{\hfil}{}%
  \ifthenelse{\equal{\nvt@imgpos}{r}}{\hfill}{}%
  \ifthenelse{\equal{\nvt@imgpos}{o}}{\ifodd\c@page\hfill\fi}{}%
  \rule{0pt}{\nvt@intht}%
  \usebox\nvt@imgbox%
  \ifthenelse{\equal{\nvt@imgpos}{c}}{\hfil}{}%
  \ifthenelse{\equal{\nvt@imgpos}{l}}{\hfill}{}%
  \ifthenelse{\equal{\nvt@imgpos}{o}}{\ifodd\c@page\else\hfill\fi}{}%
  \par%
  \end@float%
}
%%


%% IMAGE SPECIFICATIONS (suggest image sizes)
\def\log@imagespecs{
  \FPsub{\nvt@temp@n}{\strip@pt\textwidth}{.1}
  \FPmul{\nvt@temp@n}{\nvt@temp@n}{8.3022} % TeX pt to 600ppi.
  \FPtrunc{\nvt@temp@n}{\nvt@temp@n}{0}
  \typeout{Maximum image width, @600ppi: \nvt@temp@n\space pixels.}
  \FPmul{\nvt@temp@n}{\strip@pt\nvt@ascn}{8.3022}
  \FPtrunc{\nvt@temp@n}{\nvt@temp@n}{0}
  \typeout{Max height of one-line image, @600ppi: \nvt@temp@n\space pixels.}
  \FPadd{\nvt@temp@n}{\strip@pt\nvt@ascn}{\strip@pt\nvt@leading}
  \FPmul{\nvt@temp@n}{\nvt@temp@n}{8.3022}
  \FPtrunc{\nvt@temp@n}{\nvt@temp@n}{0}
  \typeout{Max height of two-line image, @600ppi: \nvt@temp@n\space pixels.}
  \FPmul{\nvt@temp@d}{\strip@pt\nvt@leading}{8.3022}
  \FPtrunc{\nvt@temp@d}{\nvt@temp@d}{0}
  \typeout{\space\space Each extra line, add max \nvt@temp@d\space pixels.}
  \FPmul{\nvt@temp@n}{\strip@pt\textheight}{8.3022}
  \FPtrunc{\nvt@temp@n}{\nvt@temp@n}{0}
  \typeout{Max height of full-page image, @600ppi: \nvt@temp@n\space pixels.}
  \FPadd{\nvt@temp@n}{\strip@pt\nvt@leading}{\strip@pt\nvt@xht}
  \FPmul{\nvt@temp@n}{\nvt@temp@n}{8.3022}
  \FPtrunc{\nvt@temp@n}{\nvt@temp@n}{0}
  \typeout{Two-line image, visually centered vertically:^^J%
  \space\space Height @600ppi: \nvt@temp@n\space pixels. Midheight: half that.}
}
%%


%% Lua code thanks to David Carlisle, tex.stackexchange.com:
\def\nvt@check@monochrome#1{%
  \directlua{
    img2=img.scan{filename="#1"}
    tex.print(tostring(img2.colordepth==1))
  }%
}
%%


%% Lua code thanks to Marcel KrÃ¼ger, tex.stackexchange.com:
% Read file bytes as plain text, for later parsing.
% Output is comma-separated list of byte codes, decimal 0-255.
% Returns -1 if requested start is more than file size.
% Returns all bytes if requested number exceeds file size. Arguments:
% filename, start byte number (0=from beginning, e=from end), number of bytes.
\DeclareDocumentCommand\nvt@getbytes{mmm}{%
  \ifthenelse{\equal{#2}{e}}{%
    \long\edef\nvt@bytesare{%
      \directlua{
        inp = assert(io.open("#1", "rb"))
        local e=inp:seek("end")
        if #3>e+1 then
          inp:seek("set")
          local r=inp:read(e)
          sep=""
          for i,_ in string.bytes(r)
          do
          tex.sprint(sep)
          sep=","
          tex.sprint(i)
          end
        else
          local b=e-2-math.min(e,#3)
          local w=1+math.min(e,#3)
          inp:seek("set",b)
          local r=inp:read(w)
          sep=""
          for i,_ in string.bytes(r)
          do
          tex.sprint(sep)
          sep=","
          tex.sprint(i)
          end
        end
      }%
    }%
  }{%
    \long\edef\nvt@bytesare{%
      \directlua{
        inp = assert(io.open("#1", "rb"))
        local e=inp:seek("end")
        if #2>e then tex.sprint(-1) else
          local w=math.min(#3,e-#2)
          inp:seek("set",#2)
          local r=inp:read(w)
          sep=""
          for i,_ in string.bytes(r)
          do
          tex.sprint(sep)
          sep=","
          tex.sprint(i)
          end
        end
      }%
    }%
  }%
  \IfSubStr{\nvt@bytesare}{\nvt@profile@string}{fail}{}%
  \IfSubStr{\nvt@bytesare}{\nvt@packet@string}{fail}{}%
}
%%


%% INSPECT PNG (not performed unless final mode)
% If a png has private metadata (EXIF, XMP, etc.) then it is attached toward
% the end of the file. Keyword `profile' or `packet' will appear. This routine
% inspects the final 512 bytes (or entire file, if smaller) for the keywords.
\def\nvt@profile@string{81,83,80,71,74,77,70}
\def\nvt@packet@string{81,66,68,76,70,85}
\def\nvt@inspect@png{%
  \nvt@getbytes{\nvt@imgfn}{e}{512}%
  \IfSubStr{\nvt@bytesare}{\nvt@profile@string}{fail}{}%
  \IfSubStr{\nvt@bytesare}{\nvt@packet@string}{fail}{}%
}
%%



%%
\endinput
%%
%% End of file `novelette-graphics.sty'.
